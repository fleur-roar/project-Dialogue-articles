from bs4 import BeautifulSoup
import re
import os
import tabula
import fitz
import docx
import json
import csv
import random
import pdfminer.high_level
from collections import Counter
import telebot
from telebot import types

bot = telebot.TeleBot('1752493898:AAGgYdZWuhtdQh3baJPCRl-nUXs72ZWp-kc')

#—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏-------------------------------------------------
def get_tables(path):
    tabb = tabula.read_pdf(path, pages = "all", multiple_tables = True)
    name = path.strip('pdf')
    ccounter = 0
    for elem in tabb:
        ccounter += 1
        with open (name + str(ccounter) + '.xlsx', 'w', encoding = 'utf-8'):
            elem.to_excel(name + str(ccounter) + '.xlsx')
            elem.to_csv(name + str(ccounter) + '.csv')
    return ccounter
            
def get_images(path):
    doc = fitz.open(path)
    name = path.strip('pdf')
    ccounter = 0
    for page in doc:
        images = page.get_images()
        if images:
            for im in images:
                ccounter += 1
                pix = fitz.Pixmap(doc, im[0])
                pix.writeImage(name + str(ccounter) + '.png', output=None)
    return ccounter

def get_html(path, name):
    pathToScript = r'C:\Users\kseni\AppData\Local\Programs\Python\Python38-3\
2\Scripts\pdf2txt.py'
    pathPDFinput = os.path.join(path)
    pathHTMLoutput = os.path.join(name)
    os.system(r'C:\Users\kseni\AppData\Local\Programs\Python\Python38-32\pyth\
on.exe {} -o {} -S {} -t html'.format(pathToScript, pathHTMLoutput, \
                                      pathPDFinput))
    
def num_search(thing): #–¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
    for e in thing.contents:
        if re.match('\(\d(\d)?\)', str(e)):
            return re.match('\((\d)+\)', str(e))
    return False

def n_search(t): #–¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–≥–æ–≤
    if re.match(' *\(\d(\d)?\) *', str(t)):
        return re.match('\((\d)+\)', str(t))
    return False

def f_search(t): #–¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–≥–∞
    if 'style' in t.attrs:
        if re.match("font-family: CharterITC-(Bold)?Italic; .*",\
                    str(t['style'])):
            return re.match("font-family: CharterITC-(Bold)?Italic; .*", \
                            str(t['style']))
    return False

def get_italics(l, text):
    if f_search(l[0]):
        text.extend(l[0].contents)
        return get_italics(l[1:], text)
    else:
        return text
    
def p_search(list_of_soup):
    s = []
    for i in range (len(list_of_soup)):
        if num_search(list_of_soup[i]):
            if n_search(list_of_soup[i].contents[0]):
                tt = []
                sent = get_italics(list_of_soup[(i+1):], tt)
                s.append(sent)
    return s

def processing_s(s):
    ls = []
    coun = 0
    for elem in s:
        coun += 1
        sent = ''
        if elem != []:
            for ss in elem:
                if str(ss) != '<br/>':
                    if str(ss).endswith('-'):
                        sent += str(ss).strip('\n')
                    else:
                        sent += str(ss).strip('\n') + ' '
            ls.append('(' + str(coun) + ') ' + sent)
    return ls

def get_examples(path):
    n = path.strip('pdf') + 'html'
    get_html(path, n)
    with open(n, encoding = 'utf-8') as fp:
        soup = BeautifulSoup(fp, 'html.parser')
        span_list = soup.find_all('span')
        h = p_search(span_list)
        return (processing_s(h))
    
def write_examples(e, path):
    name = path.strip('pdf') + 'txt'
    if e!=[]:
        with open(name, 'w', encoding='utf-8') as f:
            for elem in e:
                f.write(elem + '\n\n')
    return len(e)

def make_docx(path, imn, tabn, exn):
    txtpath = path.strip('pdf') + 'txt'
    name = path.strip('pdf')
    doc = docx.Document()
    doc.add_heading('–°–¢–ê–¢–¨–Ø: –º–∞—Ç–µ—Ä–∏–∞–ª—ã', level=1)
    if exn != 0:
        doc.add_heading('–ü—Ä–∏–º–µ—Ä—ã', level=3)
        with open(txtpath, encoding='utf-8') as tet:
            t = tet.read()
            doc.add_paragraph(text=t)
        doc.add_page_break()
    if imn != 0:
        doc.add_heading('–ö–∞—Ä—Ç–∏–Ω–∫–∏', level=3)
        for h in range(imn):
            doc.add_picture(name + str(h+1) + '.png')
            doc.add_page_break()
    if tabn != 0:
        doc.add_heading('–¢–∞–±–ª–∏—Ü—ã', level=3)
        for k in range(tabn):
            with open(name + str(k+1) + '.csv', encoding = 'utf-8') as \
                 csvfile:
                c = csv.DictReader(csvfile)
                headers = []
                for row in c:
                    rowcounter = 0
                    for elem in row:
                        rowcounter += 1
                table = doc.add_table(rows=1, cols=rowcounter)
            with open(name + str(k+1) + '.csv', encoding = 'utf-8') as \
                 csvfile:
                c = csv.reader(csvfile)
                i = 0
                for row in c:
                    j = 0
                    for el in row:
                        if j == 0:
                            row_cells = table.add_row().cells
                        row_cells[j].text = el
                        j += 1
                    i += 1
            doc.add_page_break()
    doc.save(name + 'docx')
    
def main(p):
    examples = get_examples(p)
    ex = write_examples(examples, p)
    imnum = get_images(p)
    tabl = get_tables(p)
    make_docx(p, imnum, tabl, ex)
    p = p.rstrip("pdf")
    p += "docx"
    return p

#—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–≤—É—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –±–æ—Ç–∞----------------------------------------
def obr_keyword(word):
    w = word.lower()
    w = w.replace("keyword:","", 1)
    w = w.strip(' ')
    final = "–°–æ —Å–ª–æ–≤–æ–º \'" + w + "\' —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏: \n \n"
    anti_final = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞... \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å,\
 –≤–¥—Ä—É–≥ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏"

    with open('keywords.json', 'r', encoding='utf-8') as f:
        text = json.load(f)
        if w in text:
            a = text[w]
            for i in a:
                final += "üå≤" + i[1]
                final += ", "
                final += i[0]
                final += " \n"
            return  final
        else:
            return anti_final


def obr_articles(tex):
    links = csv.DictReader(open('links_to_articles.csv', encoding='utf-8'))
    links_list = []
    title = tex.lower()
    title = title.replace("—Å—Ç–∞—Ç—å—è:","", 1)
    title = title.strip(' ')
    var_final = 0
    for row in links: 
        new = str(row['title']) 
        new = new.lower() 
        if title in new: 
            links_list.append(str(row['link'])) 
    line = len(links_list)
    if line == 0:
        links_list = ["0"]
    return links_list, line

def randomizer():
    with open('authors_and_titles.json', 'r', encoding='utf-8') as f:
        text = json.load(f)
        a = random.randrange(1, 326)
        a = str(a)
        return text[a]

def randomizer_words():
    with open('random_text.json', 'r', encoding='utf-8') as f:
        text = json.load(f)
        a = random.randrange(1, 12)
        a = str(a)
        return text[a]

#–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞-----------------------------------------------------------------
@bot.message_handler(commands = ['start'])
def starter(message):
    bot.send_message(message.from_user.id, "–ù–∞—à –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å! –î–ª—è —Ç–æ–≥–æ\
, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /menu. \n–¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø\
–æ—á–∫–∏. –ü—Ä–æ–π–¥—ë–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö. \n \n‚Äú*–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏* üçè‚Äù. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø\
–æ–ª—É—á–∏—Ç—å –ª–∏–±–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Ç–∞–±–ª–∏—Ü –∏–∑ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏, –ª–∏–±–æ —Ç–æ–ø-25 —Å–∞\
–º—ã—Ö –µ—ë —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Å–ª–æ–≤. \n \n‚Äú*–î–æ—Å—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –î–∏–∞–ª–æ–≥–∞* ü•ë‚Äù. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç \
‚Äú–ø—Ä–æ–±–∏–≤–∞—Ç—å‚Äù —Å—Ç–∞—Ç—å–∏ –î–∏–∞–ª–æ–≥–∞ –∑–∞ 2020 –≥–æ–¥ –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ \
–≥—É–≥–ª –ø–∞–ø–∫–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ. \n \n‚Äú*–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã* ü•ù‚Äù. –ó–¥–µ—Å—å –ª–µ\
–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º –î–∏–∞–ª–æ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç. –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â\
–µ–µ: —Å–ø–∏—Å–æ–∫ –∏–∑ 5 —Å–∞–º—ã—Ö –ø–∏—à—É—â–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤, —Å–ø–∏—Å–æ–∫ –∏–∑ 20 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö \
—Å–ª–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º; –∞ –µ—Å–ª–∏ –≤—ã –Ω\
–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫—É—é —Å—Ç–∞—Ç—å—é –ø–æ—á–∏—Ç–∞—Ç—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ Random, –∏ –Ω–∞—à —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä\
—É–µ—Ç –≤–∞–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é! \n \n–ù–∞–º –∫–∞–∂–µ—Ç—Å—è, –≤—ã —Å –ª–µ–≥–∫–æ—Å—Ç—å—é —Ä–∞–∑–±–µ—Ä–µ—Ç–µ—Å—å –≤ –Ω–∞–≤–∏–≥\
–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ :) –ù–æ –≤—Å—ë –∂–µ, –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞ –∏ —Ö–æ\
—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ /help. \n \n–î–æ–±—Ä–æ –ø–æ–∂–∞\
–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç–µ–π! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ /menu :)",
                     parse_mode= 'Markdown')
    chat_id = message.chat.id

@bot.message_handler(commands = ['help'])
def starter(message):
    bot.send_message(message.from_user.id, "–í –°—Ç–∞—Ä—Ç–æ–≤–æ–º –º–µ–Ω—é (–∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç\
–µ —É–≤–∏–¥–µ—Ç—å, –Ω–∞–∂–∞–≤ /menu) –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–æ—á–∫–∏. –ü—Ä–æ–π–¥—ë–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö\
. \n \n‚Äú*–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏* üçè‚Äù. –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ - ‚Äú—Ö—ç–Ω–¥–∞—É—Ç‚Äù –∏ ‚Äú—á–∞—Å\
—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞‚Äù. –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–∞–∂–¥—É—é –∏–∑ –Ω–∏—Ö, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—å–∏ (–ø–æ–∂–∞–ª—É–π\
—Å—Ç–∞, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf!) –∏ –ø–æ–ª—É—á–∞—Ç—å –ª–∏–±–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏\
 —Ç–∞–±–ª–∏—Ü –∏–∑ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏, –ª–∏–±–æ —Ç–æ–ø-25 —Å–∞–º—ã—Ö –µ—ë —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Å–ª–æ–≤. \n \n‚Äú*–î–æ—Å—Ç–∞—Ç—å —Å—Ç–∞—Ç—å\
—é –î–∏–∞–ª–æ–≥–∞* ü•ë‚Äù. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç ‚Äú–ø—Ä–æ–±–∏–≤–∞—Ç—å‚Äù —Å—Ç–∞—Ç—å–∏ –î–∏–∞–ª–æ–≥–∞ –∑–∞ 2020 –≥–æ–¥\
 –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞—Ç—å—è: (–Ω–∞–∑–≤–∞\
–Ω–∏–µ), –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—É–≥–ª –ø–∞–ø–∫–∏ —Å–æ –≤—Å–µ–º–∏ —Å—Ç–∞—Ç—å—è–º–∏, –≥–¥–µ –µ—Å—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞\
–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è. –ê –≤–æ—Ç —á—Ç–æ –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–∞—Ö - –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–∞–ø–∫–∞—Ö :) \n \n\
‚Äú*–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã* ü•ù‚Äù. –ó–¥–µ—Å—å –ª–µ–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º –î–∏–∞–ª–æ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏\
–µ 5 –ª–µ—Ç (2016-2020 –≥–æ–¥—ã). –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ: —Å–ø–∏—Å–æ–∫ –∏–∑ 5 —Å–∞–º—ã—Ö –ø–∏—à—É—â–∏\
—Ö –∞–≤—Ç–æ—Ä–æ–≤, —Å–ø–∏—Å–æ–∫ –∏–∑ 20 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ \
—Å—Ç–∞—Ç—å–∏ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º (–≤–≤–µ–¥–∏—Ç–µ keyword: (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)); –∞ –µ\
—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫—É—é —Å—Ç–∞—Ç—å—é –ø–æ—á–∏—Ç–∞—Ç—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ Random, –∏ –Ω–∞—à —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä \
—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é! \n \n–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ - –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ—É\
–Ω–∫—Ü–∏–π –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–µ–µ –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—É—Ç—å —Å –∫–Ω–æ–ø–æ—á–∫–∞–º–∏\
 —Å–æ –°—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é: \nüå¥–Ω–∞–ø–∏—Å–∞–≤ keyword: (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ), –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫\
 –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π —Å —ç—Ç–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º \nüå¥–Ω–∞–ø–∏—Å–∞–≤ —Å—Ç–∞—Ç—å—è: (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏), –≤—ã \
–ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—É–≥–ª-–ø–∞–ø–∫—É —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ø–æ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ \nüå¥–Ω–∞–ø–∏—Å–∞–≤ \
Random, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ç—å—é \nüå¥–¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞\
—Ç—å –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é",parse_mode= 'Markdown')
    chat_id = message.chat.id

@bot.message_handler(commands=['menu'])
def menu(message):
    start_menu = types.ReplyKeyboardMarkup(True, True)
    start_menu.row('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ üçè')
    start_menu.row('–î–æ—Å—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –î–∏–∞–ª–æ–≥–∞ ü•ë')
    start_menu.row('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã ü•ù')
    bot.send_message(message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é',\
reply_markup=start_menu)

#—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞------------------------------------------------
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ üçè':
        source_language_menu = types.ReplyKeyboardMarkup(True, True)
        source_language_menu.row('–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞', '–•—ç–Ω–¥–∞—É—Ç')
        source_language_menu.row('–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id,"*–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞* - —Ç—É—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ \
25 —Å–∞–º—ã—Ö —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Å–ª–æ–≤ –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–∏ \n*–•—ç–Ω–¥–∞—É—Ç* - –∞ —Ç—É—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª —Å ‚Äú—Ö\
—ç–Ω–¥–∞—É—Ç–æ–º‚Äù –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–∏ (–≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–º–∏ –∏–∑ —Å—Ç–∞—Ç—å–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–∞–º\
–∏)",parse_mode= 'Markdown', reply_markup=source_language_menu)

    elif message.text == '–î–æ—Å—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –î–∏–∞–ª–æ–≥–∞ ü•ë':
        B_menu = types.ReplyKeyboardMarkup(True, True)
        B_menu.row('–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç\
—å–∏ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ \n  \n—Å—Ç–∞—Ç—å—è: ____________', reply_markup=B_menu)
        
    elif "—Å—Ç–∞—Ç—å—è:" in message.text or "–°—Ç–∞—Ç—å—è:" in message.text:
        k = message.text
        answer = obr_articles(message.text)[0]
        line = obr_articles(message.text)[1]
        if line == 0:
            bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—Ç–∞—Ç—å\
–∏... \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–¥—Ä—É–≥ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏")
        elif line > 1:
            mess = "–í–∞—É, —É –Ω–∞—Å —Ü–µ–ª—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º!  \n–í–æ\
—Ç –æ–Ω–∏ –≤—Å–µ: \n"
            for i in range(len(answer)):
                if i == 0:
                    mess += answer[i]
                    mess +=  " \n"
                if i != 0:
                    mess += "üåø"
                    mess +=  " \n"
                    mess += answer[i]
                    mess +=  " \n"
            bot.send_message(message.chat.id, mess)
        else:
            markup = types.InlineKeyboardMarkup()
            btn_article= types.InlineKeyboardButton(text='ü•ëü•ëü•ë', url\
                                                    = answer[0])
            markup.add(btn_article)
            bot.send_message(message.chat.id, "–£—Ä–∞, —Ç—ã–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã \
–∑–∞–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", reply_markup = markup)
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ\
–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥—Ä—É–≥–∏–º —Å—Ç–∞—Ç—å—è–º –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

    elif message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã ü•ù':
        C_menu = types.ReplyKeyboardMarkup(True, True)
        C_menu.row('–ê–≤—Ç–æ—Ä—ã', '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', '–ü–æ–∏—Å–∫')
        C_menu.row('Random', '–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\
 –ø–æ —Å—Ç–∞—Ç—å—è–º –î–∏–∞–ª–æ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç: \n \nü•ù–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 5 —Å–∞–º—ã\
—Ö –ø–∏—à—É—â–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤: \n–Ω–∞–∂–º–∏—Ç–µ *–ê–≤—Ç–æ—Ä—ã* \nü•ù–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-20 keywords: \n–Ω–∞\
–∂–º–∏—Ç–µ *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞* \nü•ù–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º keyword: \n–Ω–∞–∂–º\
–∏—Ç–µ *–ü–æ–∏—Å–∫* \n \n–ê –µ—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫—É—é –±—ã —Å—Ç–∞—Ç—å—é –ø–æ—á–∏—Ç–∞—Ç—å - –ø—Ä–µ–¥–ª–∞–≥\
–∞–µ–º –Ω–∞–∂–∞—Ç—å *Random*", parse_mode= 'Markdown', reply_markup=C_menu)

    elif message.text == '–ê–≤—Ç–æ—Ä—ã':
        B_menu = types.ReplyKeyboardMarkup(True, True)
        B_menu.row('–ù–∞–∑–∞–¥!')
        bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫—Ç—É—Å–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫\
–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç): \n \n–ê–ø—Ä–µ—Å—è–Ω –í. –Æ.:   üåµüåµ\
üåµüåµüåµüåµüåµüåµ \n–ò–Ω—å–∫–æ–≤–∞ –û. –Æ.:    üåµüåµüåµüåµüåµüåµ \n–õ–µ–≤–æ–Ω—Ç–∏–Ω–∞ –ò. –ë.: üåµüåµüåµüåµüåµüåµ \
\n–ö—É—Å—Ç–æ–≤–∞ –ì. –ò.:        üåµüåµüåµüåµüåµ \n–õ—É–∫–∞—à–µ–≤–∏—á –ù.–í.:  üåµüåµüåµüåµüåµ',\
 reply_markup=B_menu)

    elif message.text == '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞':
        B_menu = types.ReplyKeyboardMarkup(True, True)
        B_menu.row('–ù–∞–∑–∞–¥!')
        bot.send_message(message.chat.id, '*–¢–æ–ø-20 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö keywords:*\
\n_Russian, Russian language_ \n \nCorpus linguistics, semantics, parallel cor\
pora, word embeddings, natural language processing, sentiment analysis, polyse\
my, word2vec, distributional semantics, BERT, prosody, machine learning, lemma\
tization, corpus, thesaurus, phonetics, spoken language, semantic similarity, \
multimodal communication, named entity recognition.',parse_mode= 'Markdown',\
                         reply_markup=B_menu)

    elif message.text == '–ü–æ–∏—Å–∫':
        B_menu = types.ReplyKeyboardMarkup(True, True)
        B_menu.row('–ù–∞–∑–∞–¥!')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å\
–∫–æ–º) –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n \nkeyword: _________', reply_markup=B_menu)

    elif "keyword" in message.text or "Keyword" in message.text:
        B_menu = types.ReplyKeyboardMarkup(True, True)
        B_menu.row('–ù–∞–∑–∞–¥!')
        bot.send_message(message.chat.id, obr_keyword(message.text), \
                         reply_markup=B_menu)
        
    elif message.text == 'Random':
        L_menu = types.ReplyKeyboardMarkup(True, True)
        L_menu.row('–ù–∞–∑–∞–¥!', '–•–æ—á—É –µ—â—ë..')
        a = randomizer()
        b = randomizer_words()
        random_message = b + " \n" + a[1] + ", " + a[0]
        bot.send_message(message.chat.id, random_message, reply_markup=L_menu)

    elif message.text == '–•–æ—á—É –µ—â—ë..':
        L_menu = types.ReplyKeyboardMarkup(True, True)
        L_menu.row('–ù–∞–∑–∞–¥!', '–•–æ—á—É –µ—â—ë..')
        a = randomizer()
        b = randomizer_words()
        random_message = b + " \n" + a[1] + ", " + a[0]
        bot.send_message(message.chat.id, random_message, reply_markup=L_menu)

    elif message.text == '–ù–∞–∑–∞–¥!':
        C_menu = types.ReplyKeyboardMarkup(True, True)
        C_menu.row('–ê–≤—Ç–æ—Ä—ã', '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', '–ü–æ–∏—Å–∫')
        C_menu.row('Random', '–ù–∞–∑–∞–¥') 
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫\
—Ç–æ–≤ ', reply_markup=C_menu)

    elif message.text == '–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞':
        source_language_menu = types.ReplyKeyboardMarkup(True, True)
        source_language_menu.row('–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞', '–•—ç–Ω–¥–∞—É—Ç')
        source_language_menu.row('–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf —Å –ø–æ–¥\
–ø–∏—Å—å—é ‚Äú—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å‚Äù', reply_markup=source_language_menu)

    elif message.text == '–•—ç–Ω–¥–∞—É—Ç':
        source_language_menu = types.ReplyKeyboardMarkup(True, True)
        source_language_menu.row('–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞', '–•—ç–Ω–¥–∞—É—Ç')
        source_language_menu.row('–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf —Å –ø–æ–¥\
–ø–∏—Å—å—é ‚Äú—Ö—ç–Ω–¥–∞—É—Ç‚Äù', reply_markup=source_language_menu)

    elif message.text == '–ù–∞–∑–∞–¥':
        menu(message)

    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞—á\
–∞—Ç—å —Å /menu')

#–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±–æ—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º--------------------------------
@bot.message_handler(content_types=['document'])
def handle_docs(message):
    if message.caption == "—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å":
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            src = 'C:/Downloads/papka/' + message.document.file_name;
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.reply_to(message, "–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–µ–π—á–∞—Å –º—ã —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º")
            n = 25
            pdfdir = src

            textpdf = pdfminer.high_level.extract_text(pdfdir)
            textpdf = textpdf.replace('\n', ' ')
# –≤—Å–µ –∞–±–∑–∞—Ü—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏ –≤ –ø—Ä–æ–±–µ–ª—ã, —Ç–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å - —Å–ø–ª–æ—à–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
# –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            if '- ' in textpdf: 
                j = 0
                k = len(textpdf)
                while j < k-2:
                    if textpdf[j] == '-' and textpdf[j+1] == ' ': 
                        textpdf = textpdf[:j] + textpdf[j+2:] 
                        k -= 2 
                    else:
                        j += 1 

            with open('stop_all.txt', encoding='utf-8') as f:
                stop_list = f.read() 
            stop_words = []
            for word in stop_list.split():
                word = word.strip('!~./\\"\'*(),;:?%^<>&-=+\n¬ª¬´')
                stop_words.append(word) 

            article = textpdf
            words = []
            for word in article.split():
                word = word.strip('!~./\\"\'*(),;:?%^<>&-=+\n¬ª¬´')
                if word.lower() not in stop_words and word != '':
                    words.append(word)

            mostnwithfreq = [] 
            mostn = [] 
            mostnwithfreq = Counter(words).most_common(n)
            for t in mostnwithfreq:
                mostn.append(t[0])
            mostn = str(mostn)
            mostn = mostn.strip("[]")
            final_line = "–í–æ—Ç –∏ 25 —Å–∞–º—ã—Ö —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Å–ª–æ–≤ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞: \n \n" + \
                         mostn
            bot.send_message(message.chat.id, final_line)
        except Exception as e:
            bot.reply_to(message, e)


    if message.caption == "—Ö—ç–Ω–¥–∞—É—Ç":
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            src = 'C:/Downloads/papka/' + message.document.file_name;
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            bot.reply_to(message, "–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–µ–π—á–∞—Å –º—ã —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º")

            f = open(main(src),"rb")
            bot.send_document(message.chat.id,f)
            bot.send_message(message.chat.id, '–£—Ä–∞, –∑–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö—ç–Ω–¥–∞—É—Ç!!')
            
        except Exception as e:
            bot.reply_to(message, e)

#—á—Ç–æ–±—ã –±–æ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è--------------------------------------------
bot.polling(none_stop=True, interval=0) 




